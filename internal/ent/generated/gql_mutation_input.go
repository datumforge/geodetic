// Code generated by ent, DO NOT EDIT.

package generated

import (
	"time"

	"github.com/datumforge/geodetic/internal/ent/enums"
)

// CreateDatabaseInput represents a mutation input for creating databases.
type CreateDatabaseInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	CreatedBy      *string
	UpdatedBy      *string
	OrganizationID string
	Name           string
	Geo            *string
	Dsn            string
	Token          string
	Status         *enums.DatabaseStatus
	Provider       *enums.DatabaseProvider
}

// Mutate applies the CreateDatabaseInput on the DatabaseMutation builder.
func (i *CreateDatabaseInput) Mutate(m *DatabaseMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetOrganizationID(i.OrganizationID)
	m.SetName(i.Name)
	if v := i.Geo; v != nil {
		m.SetGeo(*v)
	}
	m.SetDsn(i.Dsn)
	m.SetToken(i.Token)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Provider; v != nil {
		m.SetProvider(*v)
	}
}

// SetInput applies the change-set in the CreateDatabaseInput on the DatabaseCreate builder.
func (c *DatabaseCreate) SetInput(i CreateDatabaseInput) *DatabaseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDatabaseInput represents a mutation input for updating databases.
type UpdateDatabaseInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearUpdatedBy bool
	UpdatedBy      *string
	OrganizationID *string
	Name           *string
	ClearGeo       bool
	Geo            *string
	Dsn            *string
	Token          *string
	Status         *enums.DatabaseStatus
	Provider       *enums.DatabaseProvider
}

// Mutate applies the UpdateDatabaseInput on the DatabaseMutation builder.
func (i *UpdateDatabaseInput) Mutate(m *DatabaseMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearGeo {
		m.ClearGeo()
	}
	if v := i.Geo; v != nil {
		m.SetGeo(*v)
	}
	if v := i.Dsn; v != nil {
		m.SetDsn(*v)
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Provider; v != nil {
		m.SetProvider(*v)
	}
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdate builder.
func (c *DatabaseUpdate) SetInput(i UpdateDatabaseInput) *DatabaseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdateOne builder.
func (c *DatabaseUpdateOne) SetInput(i UpdateDatabaseInput) *DatabaseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	CreatedBy       *string
	UpdatedBy       *string
	Name            string
	Description     *string
	PrimaryLocation *string
	Locations       []string
	Token           string
	Region          *enums.Region
}

// Mutate applies the CreateGroupInput on the GroupMutation builder.
func (i *CreateGroupInput) Mutate(m *GroupMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.PrimaryLocation; v != nil {
		m.SetPrimaryLocation(*v)
	}
	if v := i.Locations; v != nil {
		m.SetLocations(v)
	}
	m.SetToken(i.Token)
	if v := i.Region; v != nil {
		m.SetRegion(*v)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the GroupCreate builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupInput represents a mutation input for updating groups.
type UpdateGroupInput struct {
	ClearUpdatedAt       bool
	UpdatedAt            *time.Time
	ClearUpdatedBy       bool
	UpdatedBy            *string
	Name                 *string
	ClearDescription     bool
	Description          *string
	ClearPrimaryLocation bool
	PrimaryLocation      *string
	ClearLocations       bool
	Locations            []string
	AppendLocations      []string
	Token                *string
	Region               *enums.Region
}

// Mutate applies the UpdateGroupInput on the GroupMutation builder.
func (i *UpdateGroupInput) Mutate(m *GroupMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearPrimaryLocation {
		m.ClearPrimaryLocation()
	}
	if v := i.PrimaryLocation; v != nil {
		m.SetPrimaryLocation(*v)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.Locations; v != nil {
		m.SetLocations(v)
	}
	if i.AppendLocations != nil {
		m.AppendLocations(i.Locations)
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.Region; v != nil {
		m.SetRegion(*v)
	}
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdate builder.
func (c *GroupUpdate) SetInput(i UpdateGroupInput) *GroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdateOne builder.
func (c *GroupUpdateOne) SetInput(i UpdateGroupInput) *GroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
