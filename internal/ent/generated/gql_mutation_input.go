// Code generated by ent, DO NOT EDIT.

package generated

import (
	"time"
)

// CreateDatabaseInput represents a mutation input for creating databases.
type CreateDatabaseInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	CreatedBy      *string
	UpdatedBy      *string
	OrganizationID string
	Name           string
	Geo            *string
	Dsn            string
}

// Mutate applies the CreateDatabaseInput on the DatabaseMutation builder.
func (i *CreateDatabaseInput) Mutate(m *DatabaseMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetOrganizationID(i.OrganizationID)
	m.SetName(i.Name)
	if v := i.Geo; v != nil {
		m.SetGeo(*v)
	}
	m.SetDsn(i.Dsn)
}

// SetInput applies the change-set in the CreateDatabaseInput on the DatabaseCreate builder.
func (c *DatabaseCreate) SetInput(i CreateDatabaseInput) *DatabaseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDatabaseInput represents a mutation input for updating databases.
type UpdateDatabaseInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearUpdatedBy bool
	UpdatedBy      *string
	OrganizationID *string
	Name           *string
	ClearGeo       bool
	Geo            *string
	Dsn            *string
}

// Mutate applies the UpdateDatabaseInput on the DatabaseMutation builder.
func (i *UpdateDatabaseInput) Mutate(m *DatabaseMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearGeo {
		m.ClearGeo()
	}
	if v := i.Geo; v != nil {
		m.SetGeo(*v)
	}
	if v := i.Dsn; v != nil {
		m.SetDsn(*v)
	}
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdate builder.
func (c *DatabaseUpdate) SetInput(i UpdateDatabaseInput) *DatabaseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdateOne builder.
func (c *DatabaseUpdateOne) SetInput(i UpdateDatabaseInput) *DatabaseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
