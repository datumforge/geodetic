// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/geodetic/internal/ent/generated/database"
	"github.com/datumforge/geodetic/internal/ent/generated/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDatabase = "Database"
)

// DatabaseMutation represents an operation that mutates the Database nodes in the graph.
type DatabaseMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	updated_at      *time.Time
	created_by      *string
	updated_by      *string
	deleted_at      *time.Time
	deleted_by      *string
	organization_id *string
	name            *string
	geo             *string
	dsn             *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Database, error)
	predicates      []predicate.Database
}

var _ ent.Mutation = (*DatabaseMutation)(nil)

// databaseOption allows management of the mutation configuration using functional options.
type databaseOption func(*DatabaseMutation)

// newDatabaseMutation creates new mutation for the Database entity.
func newDatabaseMutation(c config, op Op, opts ...databaseOption) *DatabaseMutation {
	m := &DatabaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDatabase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatabaseID sets the ID field of the mutation.
func withDatabaseID(id string) databaseOption {
	return func(m *DatabaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Database
		)
		m.oldValue = func(ctx context.Context) (*Database, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Database.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDatabase sets the old Database of the mutation.
func withDatabase(node *Database) databaseOption {
	return func(m *DatabaseMutation) {
		m.oldValue = func(context.Context) (*Database, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatabaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatabaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Database entities.
func (m *DatabaseMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatabaseMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatabaseMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Database.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DatabaseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DatabaseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *DatabaseMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[database.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *DatabaseMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[database.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DatabaseMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, database.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DatabaseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DatabaseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *DatabaseMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[database.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *DatabaseMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[database.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DatabaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, database.FieldUpdatedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *DatabaseMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DatabaseMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DatabaseMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[database.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DatabaseMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[database.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DatabaseMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, database.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *DatabaseMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *DatabaseMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *DatabaseMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[database.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *DatabaseMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[database.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *DatabaseMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, database.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DatabaseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DatabaseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *DatabaseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[database.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *DatabaseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[database.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DatabaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, database.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *DatabaseMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *DatabaseMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *DatabaseMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[database.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *DatabaseMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[database.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *DatabaseMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, database.FieldDeletedBy)
}

// SetOrganizationID sets the "organization_id" field.
func (m *DatabaseMutation) SetOrganizationID(s string) {
	m.organization_id = &s
}

// OrganizationID returns the value of the "organization_id" field in the mutation.
func (m *DatabaseMutation) OrganizationID() (r string, exists bool) {
	v := m.organization_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganizationID returns the old "organization_id" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldOrganizationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganizationID: %w", err)
	}
	return oldValue.OrganizationID, nil
}

// ResetOrganizationID resets all changes to the "organization_id" field.
func (m *DatabaseMutation) ResetOrganizationID() {
	m.organization_id = nil
}

// SetName sets the "name" field.
func (m *DatabaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DatabaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DatabaseMutation) ResetName() {
	m.name = nil
}

// SetGeo sets the "geo" field.
func (m *DatabaseMutation) SetGeo(s string) {
	m.geo = &s
}

// Geo returns the value of the "geo" field in the mutation.
func (m *DatabaseMutation) Geo() (r string, exists bool) {
	v := m.geo
	if v == nil {
		return
	}
	return *v, true
}

// OldGeo returns the old "geo" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldGeo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGeo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGeo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGeo: %w", err)
	}
	return oldValue.Geo, nil
}

// ClearGeo clears the value of the "geo" field.
func (m *DatabaseMutation) ClearGeo() {
	m.geo = nil
	m.clearedFields[database.FieldGeo] = struct{}{}
}

// GeoCleared returns if the "geo" field was cleared in this mutation.
func (m *DatabaseMutation) GeoCleared() bool {
	_, ok := m.clearedFields[database.FieldGeo]
	return ok
}

// ResetGeo resets all changes to the "geo" field.
func (m *DatabaseMutation) ResetGeo() {
	m.geo = nil
	delete(m.clearedFields, database.FieldGeo)
}

// SetDsn sets the "dsn" field.
func (m *DatabaseMutation) SetDsn(s string) {
	m.dsn = &s
}

// Dsn returns the value of the "dsn" field in the mutation.
func (m *DatabaseMutation) Dsn() (r string, exists bool) {
	v := m.dsn
	if v == nil {
		return
	}
	return *v, true
}

// OldDsn returns the old "dsn" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldDsn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDsn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDsn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDsn: %w", err)
	}
	return oldValue.Dsn, nil
}

// ResetDsn resets all changes to the "dsn" field.
func (m *DatabaseMutation) ResetDsn() {
	m.dsn = nil
}

// Where appends a list predicates to the DatabaseMutation builder.
func (m *DatabaseMutation) Where(ps ...predicate.Database) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DatabaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DatabaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Database, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DatabaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DatabaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Database).
func (m *DatabaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatabaseMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, database.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, database.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, database.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, database.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, database.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, database.FieldDeletedBy)
	}
	if m.organization_id != nil {
		fields = append(fields, database.FieldOrganizationID)
	}
	if m.name != nil {
		fields = append(fields, database.FieldName)
	}
	if m.geo != nil {
		fields = append(fields, database.FieldGeo)
	}
	if m.dsn != nil {
		fields = append(fields, database.FieldDsn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatabaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case database.FieldCreatedAt:
		return m.CreatedAt()
	case database.FieldUpdatedAt:
		return m.UpdatedAt()
	case database.FieldCreatedBy:
		return m.CreatedBy()
	case database.FieldUpdatedBy:
		return m.UpdatedBy()
	case database.FieldDeletedAt:
		return m.DeletedAt()
	case database.FieldDeletedBy:
		return m.DeletedBy()
	case database.FieldOrganizationID:
		return m.OrganizationID()
	case database.FieldName:
		return m.Name()
	case database.FieldGeo:
		return m.Geo()
	case database.FieldDsn:
		return m.Dsn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatabaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case database.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case database.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case database.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case database.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case database.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case database.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case database.FieldOrganizationID:
		return m.OldOrganizationID(ctx)
	case database.FieldName:
		return m.OldName(ctx)
	case database.FieldGeo:
		return m.OldGeo(ctx)
	case database.FieldDsn:
		return m.OldDsn(ctx)
	}
	return nil, fmt.Errorf("unknown Database field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatabaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case database.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case database.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case database.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case database.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case database.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case database.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case database.FieldOrganizationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationID(v)
		return nil
	case database.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case database.FieldGeo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGeo(v)
		return nil
	case database.FieldDsn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDsn(v)
		return nil
	}
	return fmt.Errorf("unknown Database field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatabaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatabaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatabaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Database numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatabaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(database.FieldCreatedAt) {
		fields = append(fields, database.FieldCreatedAt)
	}
	if m.FieldCleared(database.FieldUpdatedAt) {
		fields = append(fields, database.FieldUpdatedAt)
	}
	if m.FieldCleared(database.FieldCreatedBy) {
		fields = append(fields, database.FieldCreatedBy)
	}
	if m.FieldCleared(database.FieldUpdatedBy) {
		fields = append(fields, database.FieldUpdatedBy)
	}
	if m.FieldCleared(database.FieldDeletedAt) {
		fields = append(fields, database.FieldDeletedAt)
	}
	if m.FieldCleared(database.FieldDeletedBy) {
		fields = append(fields, database.FieldDeletedBy)
	}
	if m.FieldCleared(database.FieldGeo) {
		fields = append(fields, database.FieldGeo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatabaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatabaseMutation) ClearField(name string) error {
	switch name {
	case database.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case database.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case database.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case database.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case database.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case database.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case database.FieldGeo:
		m.ClearGeo()
		return nil
	}
	return fmt.Errorf("unknown Database nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatabaseMutation) ResetField(name string) error {
	switch name {
	case database.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case database.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case database.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case database.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case database.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case database.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case database.FieldOrganizationID:
		m.ResetOrganizationID()
		return nil
	case database.FieldName:
		m.ResetName()
		return nil
	case database.FieldGeo:
		m.ResetGeo()
		return nil
	case database.FieldDsn:
		m.ResetDsn()
		return nil
	}
	return fmt.Errorf("unknown Database field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatabaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatabaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatabaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatabaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatabaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatabaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatabaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Database unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatabaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Database edge %s", name)
}
