// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/datumforge/geodetic/internal/ent/generated/database"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   database.Table,
			Columns: database.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: database.FieldID,
			},
		},
		Type: "Database",
		Fields: map[string]*sqlgraph.FieldSpec{
			database.FieldCreatedAt:      {Type: field.TypeTime, Column: database.FieldCreatedAt},
			database.FieldUpdatedAt:      {Type: field.TypeTime, Column: database.FieldUpdatedAt},
			database.FieldCreatedBy:      {Type: field.TypeString, Column: database.FieldCreatedBy},
			database.FieldUpdatedBy:      {Type: field.TypeString, Column: database.FieldUpdatedBy},
			database.FieldDeletedAt:      {Type: field.TypeTime, Column: database.FieldDeletedAt},
			database.FieldDeletedBy:      {Type: field.TypeString, Column: database.FieldDeletedBy},
			database.FieldOrganizationID: {Type: field.TypeString, Column: database.FieldOrganizationID},
			database.FieldName:           {Type: field.TypeString, Column: database.FieldName},
			database.FieldGeo:            {Type: field.TypeString, Column: database.FieldGeo},
			database.FieldDsn:            {Type: field.TypeString, Column: database.FieldDsn},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dq *DatabaseQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DatabaseQuery builder.
func (dq *DatabaseQuery) Filter() *DatabaseFilter {
	return &DatabaseFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DatabaseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DatabaseMutation builder.
func (m *DatabaseMutation) Filter() *DatabaseFilter {
	return &DatabaseFilter{config: m.config, predicateAdder: m}
}

// DatabaseFilter provides a generic filtering capability at runtime for DatabaseQuery.
type DatabaseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DatabaseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DatabaseFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(database.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DatabaseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(database.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DatabaseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(database.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DatabaseFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(database.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DatabaseFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(database.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DatabaseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(database.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DatabaseFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(database.FieldDeletedBy))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *DatabaseFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(database.FieldOrganizationID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DatabaseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(database.FieldName))
}

// WhereGeo applies the entql string predicate on the geo field.
func (f *DatabaseFilter) WhereGeo(p entql.StringP) {
	f.Where(p.Field(database.FieldGeo))
}

// WhereDsn applies the entql string predicate on the dsn field.
func (f *DatabaseFilter) WhereDsn(p entql.StringP) {
	f.Where(p.Field(database.FieldDsn))
}
